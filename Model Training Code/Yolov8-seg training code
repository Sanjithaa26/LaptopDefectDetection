import torch
from ultralytics import YOLO
import albumentations as A
from albumentations.pytorch import ToTensorV2
from ultralytics.data.augment import Albumentations

# Define the Albumentations transformations for segmentation
albumentations_transform = A.Compose([
    A.OneOf([
        A.MotionBlur(p=0.3),
        A.MedianBlur(blur_limit=(3, 5), p=0.3),
        A.GaussianBlur(blur_limit=(3, 5), p=0.3),
    ], p=0.5),
    A.GaussNoise(var_limit=(10.0, 50.0), p=0.4),
    A.RandomBrightnessContrast(p=0.3),
    A.HueSaturationValue(hue_shift_limit=15, sat_shift_limit=40, val_shift_limit=30, p=0.4),
    A.Rotate(limit=10, p=0.5),
    A.Affine(translate_percent=0.1, scale=(0.8, 1.2), rotate=0, p=0.5),
    A.HorizontalFlip(p=0.5),
    A.VerticalFlip(p=0.1),
    A.Perspective(scale=(0.02, 0.05), p=0.3),
    A.CLAHE(clip_limit=(1.0, 4.0), tile_grid_size=(8, 8), p=0.01),
    A.ToGray(p=0.01)
], additional_targets={'mask': 'mask'})  # Ensure that masks are also transformed

# Wrap the Albumentations transformations into a format that YOLOv8 can handle
custom_transform = Albumentations(albumentations_transform)

# Load your pre-trained YOLOv8 segmentation model
model = YOLO("yolov8m-seg.pt")  # Use the segmentation version

# Apply custom augmentations to the model's train_transforms
model.train_transforms = custom_transform

# Train the model with custom augmentations
model.train(
    data=r"D:/hpe_yolov8/segmentation_dataset/dataset.yaml",  # Path to your dataset YAML file
    epochs=100,
    imgsz=512,
    batch=4,
    device="cpu",  # Change to 'cpu' or the GPU device number (e.g., 'cuda:0') if training on GPU
    optimizer="AdamW",
    lr0=1e-5,
    weight_decay=1e-5,
    save=True,
    save_period=5,
    val=True,
    cache=False,
    workers=0,
    verbose=True
)
